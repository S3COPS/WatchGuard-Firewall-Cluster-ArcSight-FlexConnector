# FlexAgent Regex Configuration File
do.unparsed.events=true

regex=msg_id\="([^"]+)"\\s(.*)

token.count=2

token[0].name=MSG_ID
token[0].type=String

token[1].name=MESSAGE
token[1].type=String


submessage.messageid.token=MSG_ID
submessage.token=MESSAGE

# Root Fields
event.message=MESSAGE

# device Event Class Mapping - stripping "-" to match the Watchguard message mapping database online
event.deviceEventClassId=__concatenateDeleting(MSG_ID,"-")

# Device Custom Mappings:
event.deviceCustomString2Label=__stringConstant("IN Interface")
event.deviceCustomString4Label=__stringConstant("Policy Name")
event.deviceCustomString3Label=__stringConstant("OUT Interface")
event.flexString2Label=__stringConstant("Keyvalues")


#l10n.filename.prefix=


# More Submessages will be added going forward:
submessage.count=5
#
submessage[0].messageid=3000-0148
submessage[0].pattern.count=6
submessage[0].pattern[0].regex=(Allow)\\s(\\S+)\\s(\\S+)\\s(\\d+)\\s(\\S+)\\s(\\d+)\\s(\\d+)\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d+)\\s(\\d+)\\s([^\\(]+)\\(([^\\)]+)\\).*
submessage[0].pattern[0].fields=event.name,event.deviceCustomString2,event.deviceCustomString3,additionaldata.IP_PKT_LEN,event.transportProtocol,additionaldata.IP_H_LEN,additionaldata.TTL,event.sourceAddress,event.destinationAddress,event.sourcePort,event.destinationPort,additionaldata.IP_PKT_INFO,event.deviceCustomString4
#
submessage[0].pattern[1].regex=(Deny)\\s(\\S+)\\s(\\S+)\\s(\\d+)\\s(\\S+)\\s(\\d+)\\s(\\d+)\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d+)\\s(\\d+)\\s([^\\(]+)\\(([^\\)]+)\\).*
submessage[0].pattern[1].fields=event.name,event.deviceCustomString2,event.deviceCustomString3,additionaldata.IP_PKT_LEN,event.transportProtocol,additionaldata.IP_H_LEN,additionaldata.TTL,event.sourceAddress,event.destinationAddress,event.sourcePort,event.destinationPort,additionaldata.IP_PKT_INFO,event.deviceCustomString4
#
submessage[0].pattern[2].regex=(Allow)\\s(\\S+)\\s(\\S+\\s\\S+)\\s(\\d+)\\s(\\S+)\\s(\\d+)\\s(\\d+)\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d+)\\s(\\d+)\\s([^\\(]+)\\(([^\\)]+)\\).*
submessage[0].pattern[2].fields=event.name,event.deviceCustomString2,event.deviceCustomString3,additionaldata.IP_PKT_LEN,event.transportProtocol,additionaldata.IP_H_LEN,additionaldata.TTL,event.sourceAddress,event.destinationAddress,event.sourcePort,event.destinationPort,additionaldata.IP_PKT_INFO,event.deviceCustomString4
#
submessage[0].pattern[3].regex=fqdn_dst_match\="([^"]+)"\\s(Allow)\\s(\\S+)\\s(\\S+)\\s(\\d+)\\s(\\S+)\\s(\\d+)\\s(\\d+)\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d+)\\s(\\d+)\\s([^\\(]+)\\(([^\\)]+)\\).*
submessage[0].pattern[3].fields=event.destinationHostName,event.name,event.deviceCustomString2,event.deviceCustomString3,additionaldata.IP_PKT_LEN,event.transportProtocol,additionaldata.IP_H_LEN,additionaldata.TTL,event.sourceAddress,event.destinationAddress,event.sourcePort,event.destinationPort,additionaldata.IP_PKT_INFO,event.deviceCustomString4
#
submessage[0].pattern[4].regex=fqdn_dst_match\="([^"]+)"\\s(Deny)\\s(\\S+)\\s(\\S+)\\s(\\d+)\\s(\\S+)\\s(\\d+)\\s(\\d+)\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d+)\\s(\\d+)\\s([^\\(]+)\\(([^\\)]+)\\).*
submessage[0].pattern[4].fields=event.destinationHostName,event.name,event.deviceCustomString2,event.deviceCustomString3,additionaldata.IP_PKT_LEN,event.transportProtocol,additionaldata.IP_H_LEN,additionaldata.TTL,event.sourceAddress,event.destinationAddress,event.sourcePort,event.destinationPort,additionaldata.IP_PKT_INFO,event.deviceCustomString4
#
# Submessage Catch all:
submessage[0].pattern[5].regex=(.*)
submessage[0].pattern[5].fields=event.message
submessage[0].pattern[5].extramappings=event.name=__stringConstant("Unparsed Submessage 3000-0148")
#
#
submessage[1].messageid=3000-0151
submessage[1].pattern.count=3
submessage[1].pattern[0].regex=(Allow)\\s(\\S+)\\s(\\S+(?\:\\s\\S+)?)\\s(tcp|udp|icmp|arp)\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d+)\\s(\\d+)\\s([^\\(]+)\\(([^\\)]+)\\).*
submessage[1].pattern[0].fields=event.name,event.deviceCustomString2,event.deviceCustomString3,event.transportProtocol,event.sourceAddress,event.destinationAddress,event.sourcePort,event.destinationPort,event.flexString2,event.deviceCustomString4
#
submessage[1].pattern[1].regex=(Allow)\\s(\\S+)\\s(\\S+(?\:\\s\\S+)?)\\s(icmp)\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s([^\\(]+)\\(([^\\)]+)\\).*
submessage[1].pattern[1].fields=event.name,event.deviceCustomString2,event.deviceCustomString3,event.transportProtocol,event.sourceAddress,event.destinationAddress,event.flexString2,event.deviceCustomString4
#
# Submessage Catch all:
submessage[1].pattern[2].regex=(.*)
submessage[1].pattern[2].fields=event.message
submessage[1].pattern[2].extramappings=event.name=__stringConstant("Unparsed Submessage 3000-0151")
#
#
submessage[2].messageid=3001-1001
submessage[2].pattern.count=2
submessage[2].pattern[0].regex=(Temporarily blocking host)\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})
submessage[2].pattern[0].fields=event.name,event.sourceAddress
#
# Submessage Catch all:
submessage[2].pattern[1].regex=(.*)
submessage[2].pattern[1].fields=event.message
submessage[2].pattern[1].extramappings=event.name=__stringConstant("Unparsed Submessage 3001-1001")
#
#
submessage[3].messageid=3000-0173
submessage[3].pattern.count=2
submessage[3].pattern[0].regex=(Deny)\\s(\\S+)\\s(\\S+(?\:\\s\\S+)?)\\s(tcp|udp|icmp|arp)\\s(\\d+)\\s(\\d+)\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3})\\s(\\d+)\\s(\\d+)\\s(.*)msg\="([^"]+)"\\s([^\\)]+)\\).*
submessage[3].pattern[0].fields=event.name,event.deviceCustomString2,event.deviceCustomString3,event.transportProtocol,additionaldata.IP_H_LEN,additionaldata.TTL,event.sourceAddress,event.destinationAddress,event.sourcePort,event.destinationPort,additionaldata.IP_PKT_INFO,event.message,event.deviceCustomString4
#
# Submessage Catch all:
submessage[3].pattern[1].regex=(.*)
submessage[3].pattern[1].fields=event.message
submessage[3].pattern[1].extramappings=event.name=__stringConstant("Unparsed Submessage 3000-0173")
#
#

# Default submessage descriptor
submessage[4].pattern.count=1
submessage[4].pattern[0].regex=(.*)
submessage[4].pattern[0].fields=event.message
submessage[4].pattern[0].extramappings=event.name=__stringConstant("Unparsed Firewall Submessage")


## Extraprocessor for keyvalue fields
extraprocessor.count=1
#
extraprocessor[0].type=keyvalue
extraprocessor[0].field=event.flexString2
extraprocessor[0].filename=watchguard/watchguard
extraprocessor[0].clearfieldafterparsing=false
extraprocessor[0].flexagent=true

